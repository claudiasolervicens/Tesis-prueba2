{
    "collab_server" : "",
    "contents" : "library(shinydashboard)\nlibrary(shiny)\nlibrary(readxl)\nlibrary(highcharter)\nlibrary(dplyr)\nlibrary(d3wordcloud)\nlibrary(tm)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nDataApp<-readRDS(\"07012018DataMaestra.rds\")\n\nKeyword<-function (StringVector)\n{\n  StringVector<-Corpus(VectorSource(StringVector))\n  \n  toSpace <- content_transformer(function(x, pattern) { return (gsub(pattern, \" \", x))})\n  \n  vector_cleaning<-c(\"!\",\"#\",\"$\",\"%\",\"&\",\"/\", \"•\", \"‘\", \"’\", \"-\",\"<\", \">\")\n  \n  for (i in 1:length(vector_cleaning))\n  {\n    StringVector <- tm_map(StringVector, toSpace, vector_cleaning[i])\n  }\n  \n  \n  #remover signos de  puntuación\n  StringVector <- tm_map(StringVector, removePunctuation)\n  \n  #remover número\n  StringVector <- tm_map(StringVector, removeNumbers)\n  \n  StringVector <-tm_map(StringVector,content_transformer(tolower))\n  \n  #cargar la lista de stopwords\n  stopwords <- c(stopwords(kind = \"english\"))\n  \n  #remover stopwords\n  StringVector <- tm_map(StringVector, removeWords, stopwords)\n  \n  #remover whitespace\n  StringVector <- tm_map(StringVector, stripWhitespace)\n  \n  #cargar la lista de generic terms\n  genericterms <- readLines(\"genericterms.txt\")\n  \n  #remover generic terms\n  StringVector <- tm_map(StringVector, removeWords, genericterms)\n  \n  \n  dtm <- DocumentTermMatrix(StringVector)\n  \n  #agrupar sumando por columnas\n  freq <- colSums(as.matrix(dtm))\n  \n  #el largo debe ser igual a total de términos\n  length(freq)-ncol(dtm)==0\n  \n  #ordenar por frecuencia (descendiente)\n  ord <- order(freq,decreasing=TRUE)\n  \n  #Enlistar los términos por frecuencia\n  data.frame(freq[ord])\n  \n}\n\n\n\n\n# Define UI for application that draws a histogram\nui <- dashboardPage(\n  dashboardHeader(title=\"Aplicacion Análisis Abstract Médicos\", titleWidth=400),\n  dashboardSidebar(\n    selectInput(\"variableMetodo\",\"Seleccion Método:\",\n                c(\"LDA\"=\"lda_10\",\n                  \"Kmeans\"=\"Cluster_15\",\n                  \"Heuristica propia\"=\"Categoria_1\"\n                )\n    ),\n    selectInput(\"variable\", \"Seleccion:\",\n                c(\"Todos\" = 0,\n                  \"1\" = 1,\n                  \"2\" = 2)),\n    \n    selectInput(\"variableAno\", \"Seleccion Temporal:\",\n                c(\"Todos\" = 0,\n                  \"2005\" = 2005,\n                  \"2006\" = 2006)),\n\n    textOutput(\"seleccion\"),\n    \n    textOutput(\"text\")\n    \n  ),\n  dashboardBody(\n    \n    plotOutput(\"plot\"),\n    d3wordcloudOutput(\"wordcloud\"),\n    dataTableOutput('tabla')\n    \n  )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output,session) {\n  \n  \n\n  \n  \n  dataset <- reactive({\n    \n    l<-list()\n    \n    if(input$variable==\"0\")\n    {\n      \n      A<-DataApp\n      \n      eval(parse(text=paste0(\"A%>%\n                 group_by(Ano,\",input$variableMetodo,\")%>%\n                             summarise(abs_tot=n())->DataGraph;\n                             \"\n        \n      )))\n      # A%>%\n      #   group_by(Ano,lda_10)%>%\n      #   summarise(abs_tot=n())->DataGraph;\n\n      \n    }\n    else\n    {\n      A<-subset(DataApp, lda_10 %in% input$variable)\n      eval(parse(text=paste0(\"A%>%\n                 group_by(Ano,\",input$variableMetodo,\")%>%\n                             summarise(abs_tot=n())->DataGraph;\n                             \"\n                             \n      )))\n      \n    }\n    \n\n    l[[\"DataNormal\"]]<-A\n    l[[\"DataGraph\"]]<-DataGraph\n    l\n  })\n  \n  \n  output$seleccion<-renderText(\n    {  \n      \n      invalidateLater(1,session)\n      \n      bool<-FALSE\n      if(input$variable==\"0\")\n      {\n        bool<-TRUE\n        \n      }\n      else\n      {\n        bool<-FALSE\n      }\n      \n      paste(\"Ha escogido: \", input$variable,\" que tiene tipo : \", typeof(input$variable), \"  \", bool)\n    }\n  )\n  \n  \n  \n  output$plot<- renderPlot(\n    {\n      \n      invalidateLater(2000,session)\n      \n      canvasClickFunction <- JS(\"function(event) {Shiny.onInputChange('canvasClicked', [this.name, event.point.category]);}\")\n      legendClickFunction <- JS(\"function(event) {Shiny.onInputChange('legendClicked', this.name);}\")\n      \n\n      ggplot(dataset()$DataGraph,aes(x=Ano,y=abs_tot),stat=\"identity\") + geom_col(aes_string(fill = input$variableMetodo))  \n      \n      \n        # hchart(dataset()$DataGraph,'column',hcaes(x=Ano,y=abs_tot, group=input$variableMetodo ))%>%\n        # hc_title(text='Publicaciones')%>%\n        #               hc_credits(text='Facultad de Medicina Universidad de Chile',href='http://www.medicina.uchile.cl', enabled=TRUE)%>%\n        #               hc_xAxis(title = list(text = 'Año'))%>%hc_yAxis(title = list(text = 'N° de Artículos'))%>%\n        #               hc_add_theme(hc_theme_gridlight())%>%\n        #               hc_plotOptions(\n        #               column=list(\n        #               stacking='normal'\n        #               ), series=list(animation=FALSE),\n        #               events = list(click = canvasClickFunction, legendItemClick = legendClickFunction)\n        #               )\n                      \n\n        \n      \n    }\n\n  )\n  \n  \n  \n  makeReactiveBinding(\"outputText\")\n  \n  observeEvent(input$canvasClicked, {\n    outputText <<- paste0(\"You clicked on series \", input$canvasClicked[1], \" and the bar you clicked was from category \", input$canvasClicked[2], \".\") \n  })\n  \n  observeEvent(input$legendClicked, {\n    outputText <<- paste0(\"You clicked into the legend and selected series \", input$legendClicked, \".\")\n  })\n  \n  output$text <- renderText({\n    outputText      \n  })\n  \n  \n  output$wordcloud<-renderD3wordcloud(\n    {\n      # B<-newData()\n      # A<-newData()\n      # if(input$variable==\"0\")\n      # {\n      #   B<-DataApp\n      # }\n      # else\n      # {\n      #   B<-subset(DataApp, lda_10 %in% input$variable)\n      # }\n      \n      Nombre_Frecuencia<-Keyword(dataset()$DataNormal$Abstract)\n      Nombre_Frecuencia$palabras<-row.names(Nombre_Frecuencia)\n      Nombre_Frecuencia%>%top_n(300,wt=freq.ord.)->graficar_palabras\n      d3wordcloud(graficar_palabras$palabras, graficar_palabras$freq.ord.)\n\n    }\n  )\n  \n  output$tabla<-renderDataTable(\n    {\n      if(input$variable==\"0\")\n      {\n        C<-DataApp\n      }\n      else\n      {\n        \n        \n        C<-subset(DataApp, lda_10 %in% input$variable)\n      }\n      \n      C\n    }\n  )\n  \n  \n\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n",
    "created" : 1515350182824.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "668027087",
    "id" : "5A1BB4CA",
    "lastKnownWriteTime" : 1515373906,
    "last_content_update" : 1515373906519,
    "path" : "~/Tesis/investigacion_fm/app.R",
    "project_path" : "investigacion_fm/app.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}